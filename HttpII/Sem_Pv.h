#pragma once
#ifndef SEM_PV_H
#define SEM_PV_H
#include<thread>
#include<condition_variable>
#include<iostream>
#include<atomic>

using namespace std;

/*
    ?????????????? ??????????????????
    ???????????????????????????????????
    ??????? ?????????????pv??
    ?????????????? ?????????Linux?????api ???? ??????  ???????????????C++
    ?????Ø??????????C++ ???«???????????????????? ?????????????linux api
    ?????C++11???????
*/

/*
    ????????
        ????????? ???????????
    ?¥??????????????????
    ????????pv?? ?????+1 -1
*/
#define MagicNum 11
//??magic?11???????????¥???
class Sem_Pv
{
public:
    Sem_Pv();
    Sem_Pv(int val);
    ~Sem_Pv();
    void set_CanUse();
    void sem_P();                 //put ???¥???????????
    void sem_Try_P();             //?????????¥???????????
    void sem_V();                 //get ???¥???????????
    bool sem_Try_V();             //?????????¥???????????
    void set_Val(int val);
private:
    int magic;                    //?????¥??????????
    atomic<int> waiting_num;      //???????????
    atomic<int> free_qua;         //??????¥????? ????????????
    mutex mu;
    condition_variable con;

    //mutex mx;
};

#endif // SEM_PV_H
